# Copyright Louis Dionne 2015
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: c++
compiler: clang
os: linux
sudo: false

# This describes the test matrix
#
# env is used to set global variables:
# - COMPILER: selects the compiler
#   - Note: clang uses libc++ and gcc uses libstdc++
# - BUILD_TYPE: selects the build type: Debug/Release
# - ASan: use AddressSanitizer: true/false
# - Valgrind: use valgrind: true/false
# - Site: build code to generate the site: true/false
#   - Generates code coverage output
#   - Runs the benchmarks
#   - Generates documentation
#   - Generates website
matrix:
  include:
   # The first case in the matrix for a given compiler defines how to install
   # the compiler under addons, that is, we specify the ubuntu packages required
   # and their sources (repositories).
   #
   # For example, for clang 3.7 trunk we need to get the nightly packages from
   # the llvm repository for ubuntu precise.
   #
   # We store them in the variable clang37 using &clang37 which we can reference
   # in the different builds using *clang37. This is done for each compiler.
   #
   # For each build we also define all the global variables specified above
   # TODO: use defaults and define only some of them

    # clang 3.7 with libc++, debug build
    - env: COMPILER=clang++-3.7 BUILD_TYPE=Debug
      addons: &clang37
        apt:
          packages:
            - clang-3.7
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise # latest

    # clang 3.7 with libc++, release build, ASan
#    - env: COMPILER=clang++-3.7 BUILD_TYPE=Release ASan=true
#      addons: *clang37

    # clang 3.7 with libc++, release build, valgrind
#    - env: COMPILER=clang++-3.7 BUILD_TYPE=Release Valgrind=true
#      addons: *clang37

    # clang 3.7 with libc++, release build
#    - env: COMPILER=clang++-3.7 BUILD_TYPE=Release
#      addons: *clang37

    # Site
#    - env: COMPILER=clang++-3.7 BUILD_TYPE=Release Site=true
        # GitHub token for pushing the documentation, logging in with the
        # Travis command line utility and so on. The token is stored in the
        # ${GITHUB_TOKEN} environment variable.
#        - secure: ""

#      addons: *clang37

# TODO: GCC 5 compiler
# GCC 5
#    - env: COMPILER=g++-5 BOOST_VERSION=1.57.0 UNIT_TESTS=true
#      addons: &gcc5
#        apt:
#          packages:
#            - g++-5
#            - valgrind
#          sources:
#            - ubuntu-toolchain-r-test


env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    #- secure: "gikHKTxWGN9FnJ9m+F53Y5j7jWGAOKlL2ylcFM2o0KoXOkoNAK9bJpilNppRwWhgwpC3yTJDN0k7xh9I6Ec8L0G46Q2QZdtJ/NFvWbafpzQcrAg6+872yKlP8h3GHexwEDdAdxCv8g2HeavFrDcqynssI8IoIHyZmsR6Dwym+eo="

  # We define the documentation job here instead of in matrix.include, because
  # otherwise we end up with a job that has no environment variables at all in
  # the matrix.
  matrix:
    - COMPILER=clang++-3.7 BUILD_TYPE=Debug #Site=true

# Those addons are just for the documentation job.
addons: *clang37

install:
  ############################################################################
  # All the dependencies are installed to the deps/ subdirectory.
  ############################################################################
  - DEPS_DIR="${PWD}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - CMAKE_URL=http://www.cmake.org/files/v3.2/cmake-3.2.1-Linux-x86_64.tar.gz
  - mkdir cmake
  - travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  - export PATH=${PWD}/cmake/bin:${PATH}

  ############################################################################
  # Install libc++ and libc++abi
  ############################################################################
  - if [[ "${COMPILER}" == "clang++-3.7" ]]; then LLVM_URL="https://github.com/llvm-mirror/llvm/archive/master.tar.gz"; fi
  - if [[ "${COMPILER}" == "clang++-3.7" ]]; then LIBCXX_URL="https://github.com/llvm-mirror/libcxx/archive/master.tar.gz"; fi
  - if [[ "${COMPILER}" == "clang++-3.7" ]]; then LIBCXXABI_URL="https://github.com/llvm-mirror/libcxxabi/archive/master.tar.gz"; fi
  - if [[ "${COMPILER}" == "clang++-3.7" ]]; then TAR_FMT="-xz"; fi

  - mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
  - travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FMT} -C llvm
  - travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FMT} -C llvm/projects/libcxx
  - travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FMT} -C llvm/projects/libcxxabi
  - (cd llvm/build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=${BUILD_TYPE} && make cxx -j2)

  ############################################################################
  # Install a recent Doxygen
  ############################################################################
  - DOXYGEN_URL="http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.9.1.linux.bin.tar.gz"
  - mkdir doxygen && travis_retry wget --quiet -O - ${DOXYGEN_URL} | tar --strip-components=1 -xz -C doxygen
  - export PATH=${PWD}/doxygen/bin:${PATH}

  ############################################################################
  # Install and use a more recent Ruby and install the gems for the benchmarks
  ############################################################################
  #- rvm use 2.1 --install --binary --fuzzy
  #- gem install ruby-progressbar tilt


before_script:
  ############################################################################
  # Go back to the root of the project.
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}

  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"

  ############################################################################
  # Check baseline memory usage; useful to know when OOMs occur
  ############################################################################
  - free
  - vmstat
  - ps aux --sort=-rss | head -n 10

  ############################################################################
  # Setup the build directory
  ############################################################################
  - mkdir build
  - cd build
  # Export the path to libc++
  - if [[ "${STDLIB}" != "stdc++" ]]; then export CXXFLAGS="-I ${DEPS_DIR}/llvm/build/include/c++/v1"; fi
  - if [[ "${STDLIB}" != "stdc++" ]]; then export LDFLAGS="-L ${DEPS_DIR}/llvm/build/lib -l c++ -l c++abi"; fi
  - if [[ "${STDLIB}" != "stdc++" ]]; then export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/build/lib"; fi

  # We only use the memory checker for some builds, because otherwise it takes
  # too long for very little benefit. Concretely, if we have a memory leak or
  # something like that, it's either a compiler bug or an error that will show
  # up regardless of the Boost version. Hence, we use the memory checker only
  # once for each compiler.
  - cmake .. -DCMAKE_CXX_COMPILER=${COMPILER} -DBOOST_ROOT=${DEPS_DIR}/boost -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBOOST_HANA_ENABLE_WERROR=ON
  - if [[ "${Valgrind}" == "true" ]]; then cmake .. -Dproject_name_ENABLE_VALGRIND=ON; fi
  - if [[ "${ASan}" == "true" ]]; then cmake .. -Dproject_name_ENABLE_ASAN=ON; fi

script:
  ############################################################################
  # When building the site:
  # - Build and run the benchmarks:
  #   - always build and run the benchmarks
  #   - when on master and not in pull-request, we pre-clone the datasets branch
  #     so the next datasets.clone will just pull, which is pretty quick. This
  #     reduces the risk of push conflicts when these jobs all run at the same
  #     time. When we push, we use travis_retry to try again if we encounter a
  #     push conflict, and we disable the output to avoid leaking the GitHub
  #     token.
  # - Compile in documentation mode
  # - Build the documentation
  # - Compile with code coverage
  ############################################################################
  - if [[ "${Site}" == "true" ]]; then make benchmarks; fi
  - if [[ "${Site}" == "true" && "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then make datasets.clone; fi
  - if [[ "${Site}" == "true" && "${TRAVIS_PULL_REQUEST}" == "false" && "${TRAVIS_BRANCH}" == "master" ]]; then travis_retry make datasets.push &>/dev/null; fi
  - if [[ "${Site}" == "true" ]]; then make doc; fi
  - if [[ "${Site}" == "true" ]]; then cmake .. -DCMAKE_ENABLE_COVERAGE=ON; fi
  
  ############################################################################
  # Build and run the unit tests and examples.
  ############################################################################
  - make tests -k -j2
  - make examples -k -j2 &>/dev/null
  - make check -k

  # TODO: update coveralls

#notifications:
#  webhooks:
#    urls: https://webhooks.gitter.im/e/ce1e3a2036d94b4a644f
#    on_success: change
#    on_failure: always

notifications:
  email: false